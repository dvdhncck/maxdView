
import java.io.*;
import java.util.Vector;
import java.util.Arrays;

import javax.swing.tree.*;

// looks after writing the help pages that are generated during a 'rescan plugins' operation

public class HelpMaker
{
    private maxdView mview;
    Vector plugins;

    private String shared_help_path;
    private String users_help_path;

    private String shared_help_url;
    private String users_help_url;

    public void writePages(maxdView mview_)
    {
	mview = mview_;

	shared_help_path = mview.getHelpDirectory();
	users_help_path  = mview.getUserSpecificDirectory() + File.separatorChar + "docs" + File.separatorChar;

	shared_help_url = "file:" + mview.getHelpDirectory();
	users_help_url  = "file:" + mview.getUserSpecificDirectory() + File.separatorChar + "docs" + File.separatorChar;

	plugins = mview.getPluginInfoObjects();


	System.out.println("updating help documents in " + users_help_path + "..." );

	//try
	{
	    File help_dir = new File( users_help_path );
	    help_dir.mkdirs();
	}
	//catch( java.io.IOException ioe )
	//{
	//}


	writeMenuHelpPageFile();
	writeAboutHelpPageFile();
	writePluginsHelpPageFile();
	writeCommandListHelpPageFile();
	writeCommandTableHelpPageFile();
	writeContentsHelpPageFile();
    }

    public void writeMenuHelpPageFile()
    {
	try
	{
	    BufferedWriter bw = new BufferedWriter(new FileWriter(new File( users_help_path + "Commands.html")));
	
	    bw.write("<HTML><HEAD><TITLE>maxdView: Menu Commands</TITLE></HEAD><BODY>");
	    
	    bw.write("<H1>Menu Commands</H1>\n");

	    //bw.write("<!-- AUTOMATICALLY GENERATED - DO NOT EDIT THIS FILE !! ---!>\n");
	    //bw.write("\n");
	    
	    StringBuffer sbuf = new StringBuffer();
	    
	    PluginManager pman = mview.getPluginManager();
	    
	    DefaultMutableTreeNode menu_root = pman.getMenuRoot();

	    appendTopLevelMenuNameList(sbuf, menu_root, "System");

	    sbuf.append("<UL>");
	    
	    sbuf.append("<P><LI><A HREF=\"" + shared_help_url + "PluginManager.html\">PluginManager</A><BR>");
	    sbuf.append("<FONT SIZE=-1>&nbsp;&nbsp;Install, update and remove plugins</FONT></P>");
	    
	    sbuf.append("</UL>");

	    // -------------------


	    appendTopLevelMenuNameList(sbuf, menu_root, "Display");

	    sbuf.append("<UL>");

	    sbuf.append("<P><LI><A HREF=\"" + shared_help_url + "ViewerFind.html\">Find</A><BR>");
	    sbuf.append("<FONT SIZE=-1>&nbsp;&nbsp;Locate spots using their Genes, Probe, Spot names or attributes</FONT></P>");
	    sbuf.append("<P><LI><A HREF=\"" + shared_help_url + "ViewerLayout.html\">Layout</A><BR>");
	    sbuf.append("<FONT SIZE=-1>&nbsp;&nbsp;Controls the size and layout of boxes and labels in the main viewer</FONT></P>");
	    sbuf.append("<P><LI><A HREF=\"" + shared_help_url + "ViewerColours.html\">Colours</A><BR>");
	    sbuf.append("<FONT SIZE=-1>&nbsp;&nbsp;Controls the colours assigned to the different types of data set</FONT></P>");
	    sbuf.append("<P><LI><A HREF=\"" + shared_help_url + "NewView.html\">New View</A><BR>");
	    sbuf.append("<FONT SIZE=-1>&nbsp;&nbsp;Creates a new viewer window displaying the current data</FONT></P>");
	    sbuf.append("<P><LI><A HREF=\"" + shared_help_url + "ViewerPrint.html\">Print</A><BR>");
	    sbuf.append("<FONT SIZE=-1>&nbsp;&nbsp;Print some or all of the current display</FONT></P>");
	    
	    sbuf.append("<P><LI><A HREF=\"" + shared_help_url + "ApplyFilter.html\">Apply filter</A><BR>");
	    sbuf.append("<FONT SIZE=-1>&nbsp;&nbsp;Whether to apply the current filter(s) to the data displayed in this viewer</FONT></P>");
	    	    
	    sbuf.append("</UL>");


	    // -------------------


	    for(int m=0; m < menu_root.getChildCount(); m++)
	    {
		DefaultMutableTreeNode menu_node = (DefaultMutableTreeNode) menu_root.getChildAt(m);
		String menu_name = (String) menu_node.getUserObject();
		

		appendTopLevelMenuNameList(sbuf, menu_root, menu_name);

		sbuf.append("<UL>");

		for(int c=0; c < menu_node.getChildCount(); c++)
		{
		    DefaultMutableTreeNode child_node = (DefaultMutableTreeNode) menu_node.getChildAt( c );
	    
		    String pname = (String) child_node.getUserObject();
		    
		    PluginInfo pinf = mview.getPluginInfoFromName( pname );

		    if( pinf != null )
		    {
			//String fname = mview.getPluginFullName( pname );
			
			String doc_file = "file:" + pinf.root_path + File.separator + pinf.class_name + ".html";
			
			appendPlugin( sbuf, 
				      pinf.name, 
				      doc_file, 
				      pinf.short_description );
		    }
		    else
		    {
			System.err.println("writeMenuHelpPageFile(): problem with '" + pname + "'");
		    }
		    
		}

		sbuf.append("</UL>\n");
	    

	    }


	    // -------------------


	    sbuf.append("<P>&nbsp;</P><P><FONT SIZE=-1>Note: this page is automatically generated based on the current menu hierarchy.<BR>");
	    sbuf.append(" Commands in the 'System' and 'Display' menus are built-in, all others are handled via <A HREF=\"Plugins.html\">plugin</A> classes.)<BR>");

	    if((mview.plugin_plugins_that_would_not_start != null) && (mview.plugin_plugins_that_would_not_start.size() > 0))
	    {
		sbuf.append("Classes which are present in the <TT>plugins</TT> directory, but that cannot be started, are listed below:</P><UL>");
	    
		for(int pp=0; pp < mview.plugin_plugins_that_would_not_start.size(); pp++)
		{
		    sbuf.append("<LI>" + (String)mview.plugin_plugins_that_would_not_start.elementAt(pp));
		}
		sbuf.append("</UL>");
	    }

	    bw.write(sbuf.toString());

	    bw.write("</P></FONT></BODY></HTML>");

	    //System.out.println("written commands help page");

	    bw.flush();
	    
	}
	catch(FileNotFoundException fnfe)
	{ 
	    mview.informationMessage("Cannot write 'Commands' help page\n  " + fnfe);
	}
	catch(IOException ioe)
	{
	    mview.informationMessage("Cannot write 'Commands' help page\n  " + ioe);
	}
    }

    private void appendTopLevelMenuNameList( StringBuffer sbuf, DefaultMutableTreeNode menu_root, String this_name )
    {
	sbuf.append("<A NAME=\"" + this_name + "\"><P ALIGN=\"CENTER\"><FONT SIZE=\"-1\">|");
	    
	appendTopLevelMenuName( sbuf, "System", this_name.equals("System"));
	appendTopLevelMenuName( sbuf, "Display", this_name.equals("Display"));
	
	if( menu_root != null )
	    for(int m=0; m < menu_root.getChildCount(); m++)
	    {
		DefaultMutableTreeNode menu_node = (DefaultMutableTreeNode) menu_root.getChildAt(m);
		
		String menu_name = (String) menu_node.getUserObject();
		
		appendTopLevelMenuName( sbuf, menu_name, menu_name.equals( this_name ) );
	    }
	
	sbuf.append("</FONT></P></A>");
	
    }

    private void appendTopLevelMenuName( StringBuffer sbuf, String name, boolean ignore_link )
    {
	if(ignore_link)
	    sbuf.append("&nbsp;" + name + "&nbsp;|");
	else
	    sbuf.append("&nbsp;<A HREF=\"#" + name + "\">" + name + "</A>&nbsp;|");
	
    }

    private void appendPlugin(StringBuffer sbuf, String name, String link, String desc)
    {
	sbuf.append("<LI><A HREF=\"" + link + "\">" + name + "</A><BR>");
	//sbuf.append("<I>(link is " + link + ")</I><BR>");
	sbuf.append("<FONT SIZE=-1>&nbsp;&nbsp; "+ desc + "</FONT><BR>");
	
    }

    private void appendPluginsOfType(StringBuffer sbuf, String ptype)
    {
	if((plugins == null) || (plugins.size() == 0))
	{
	    System.out.println("appendPluginsOfType(): odd, no plugins");
	    return;
	}
	
	for(int pi=0; pi < plugins.size(); pi++)
	{
	    PluginInfo pinf = (PluginInfo) plugins.elementAt(pi);

	    if(pinf.type.equals(ptype))
	    {
		// generate the name of the documentation file

		String doc_file = "file:" + pinf.root_path + File.separator + pinf.class_name + ".html";

		appendPlugin(sbuf, 
			     pinf.name, 
			     doc_file, 
			     pinf.short_description);
	    }
	}

    }

    public void writeAboutHelpPageFile()
    {
	try
	{
	    
	    BufferedWriter bw = new BufferedWriter(new FileWriter( new File( users_help_path + "About.html")));
	
	    bw.write("<HTML><HEAD><TITLE>maxdView: About</TITLE></HEAD><BODY>");
	    
	    bw.write("\n");
	    bw.write("<!-- AUTOMATICALLY GENERATED - DO NOT EDIT THIS FILE !! ---!>\n");
	    bw.write("\n");

	    bw.write("<P><CENTER><H1> " + mview.getAppTitle() + " </H1></CENTER></P>");
	    
	    bw.write("<CENTER><I> developed for </I><BR>");
	    
	    bw.write("<FONT SIZE=\"+1\"> <A HREF=\"http://www.bioinf.mac.ac.uk/microarray/\">Microarray Bioinformatics Group</A> </FONT><BR>");
	    
	    bw.write("<I> at </I><BR>");

	    bw.write("<FONT SIZE=\"+1\"> The University of Manchester </FONT></CENTER></P>");

	    bw.write("<P><CENTER><FONT SIZE=\"+1\"> Copyright &copy 2004 David Hancock </FONT></CENTER></P>");
	    
	    bw.write("<P><HR></P>");

	    bw.write("<P><CENTER>Portions of this work were generously supported by <A HREF=\"http://www.nerc.ac.uk\">NERC</A> and other portions by <A HREF=\"http://www.aventis.com\">Aventis</A></CENTER></P>");

	    bw.write("<P><HR></P>");

	    // dump a list of all installed plugins and their version numbers...
	    
	    bw.write("<P><CENTER><B>Installed Plugins:</B></CENTER></P>");
	    bw.write("<CENTER><TABLE>");
	    
	    for(int p=0; p < plugins.size(); p++)
	    {
		PluginInfo plinf = (PluginInfo) plugins.elementAt(p);

		bw.write("<TR><TD ALIGN=\"RIGHT\">" + plinf.name + "&nbsp;</TD><TD ALIGN=\"LEFT\">" + plinf.version_major + "." + plinf.version_minor + "-" + plinf.build + "<TD></TR>");
		
		if((plinf.long_description != null) && (plinf.long_description.length() > 0))
		{
		    bw.write("<TR><TD>&nbsp;</TD><TD ALIGN=\"LEFT\"><FONT SIZE=\"-1\">" + plinf.long_description + "</FONT><BR></TD></TR>");
		}
	    }
	    bw.write("</TABLE></CENTER>");


	    bw.write("</BODY></HTML>");

	    //System.out.println("written commands help page");

	    bw.flush();
	    
	}
	catch(FileNotFoundException fnfe)
	{ 
	    mview.informationMessage("Cannot write 'Commands' help page\n  " + fnfe);
	}
	catch(IOException ioe)
	{
	    mview.informationMessage("Cannot write 'Commands' help page\n  " + ioe);
	}
    }

    public void writePluginsHelpPageFile()
    {
	try
	{
	    
	    BufferedWriter bw = new BufferedWriter(new FileWriter(new File(users_help_path + "PluginList.html")));
	
	    bw.write("<HTML><HEAD><TITLE>maxdView: Plugins</TITLE></HEAD><BODY>");

	    bw.write("\n");
	    bw.write("<!-- AUTOMATICALLY GENERATED - DO NOT EDIT THIS FILE !! ---!>\n");
	    bw.write("\n");

	    bw.write("<H1>Installed Plugins</H1>\n");

	    // generate an alphabetically sorted list

	    
	    
	    String[] pnames = new String[plugins.size()];
	    
	    for(int pi=0; pi < plugins.size(); pi++)
	    {
		PluginInfo plinf = (PluginInfo) plugins.elementAt(pi);
		pnames[pi] = plinf.name;
	    }
	    Arrays.sort(pnames);

	    for(int pi=0; pi < pnames.length; pi++)
	    {
		PluginInfo pinf = mview.getPluginInfoFromName( pnames[pi] );

		String doc_file = "file:" + pinf.root_path + File.separator + pinf.class_name + ".html";

		bw.write("<P><A HREF=\"" + doc_file + "\"><B>" + pinf.name + "</B></A><BR>");
		bw.write("&nbsp;&nbsp;<FONT SIZE=\"-1\">" + pinf.short_description + "</FONT></P>\n");
		
	    }
	    //System.out.println("written commands help page");

	    bw.write("</BODY></HTML>");
	    bw.flush();
	    
	}
	catch(FileNotFoundException fnfe)
	{ 
	    mview.informationMessage("Cannot write 'Commands' help page\n  " + fnfe);
	}
	catch(IOException ioe)
	{
	    mview.informationMessage("Cannot write 'Commands' help page\n  " + ioe);
	}
    }

    // ===================================================================================

    public void writeCommandTableHelpPageFile()
    {
	Vector coms = mview.getAllCommands();
	Vector sortvec = new Vector();
	java.util.Hashtable ht = new java.util.Hashtable();
	java.util.Hashtable counts = new java.util.Hashtable();

	for(int c=0; c < coms.size(); c++)
	{
	    PluginCommand pc  = (PluginCommand) coms.elementAt(c);

	    String name = pc.plugin_name + "." + pc.name;

	    ht.put( name, pc );

	    Integer cnt = (Integer)counts.get(pc.plugin_name);
	    if(cnt == null)
		cnt = new Integer(0);
	    counts.put( pc.plugin_name, new Integer( cnt.intValue() + 1) );
	    
	    sortvec.addElement(name);
	}

	String[] sort_a = (String[]) sortvec.toArray(new String[0]);
	java.util.Arrays.sort( sort_a );

	try
	{
	    BufferedWriter bw = new BufferedWriter(new FileWriter(new File( users_help_path + "PluginCommandsTable.html")));
	    
	    bw.write("<HTML><HEAD><TITLE>maxdView: Plugin Command List</TITLE></HEAD><BODY>");
	    
	    bw.write("\n");
	    bw.write("<!-- AUTOMATICALLY GENERATED - DO NOT EDIT THIS FILE !! ---!>\n");
	    bw.write("\n");

	    bw.write("<H1>Plugin Commands</H1>\n");

	    bw.write("<P>This is an alphabetically sorted list of the commands supported by the currently installed plugins.</P>");

	    bw.write("<P>(also available in <A HREF=\"PluginCommandsList.html\">list format</A>.)</P>");

	    bw.write("<TABLE BORDER=1>\n");

	    bw.write("<TR><TD><I>Plugin</I></TD><TD><I>Command</I></TD><TD><I>Argument</I></TD>" + 
		     "<TD><I>Type</I></TD><TD><I>Comment</I></TD><TD><I>Default</I></TD>\n");

	    String last_plugin = null;

	    for(int c=0; c < sort_a.length; c++)
	    {
		PluginCommand pc = (PluginCommand) ht.get( sort_a[c] );

		StringBuffer sbuf = new StringBuffer();

		boolean new_plugin = false;

		if(last_plugin == null)
		    new_plugin = true;
		else
		    if(!pc.plugin_name.equals(last_plugin))
			new_plugin = true;
		
		if(new_plugin)
		{
		    int ncoms = ((Integer) counts.get(pc.plugin_name)).intValue();
		    
		    sbuf.append("<TR><TD VALIGN=TOP ROWSPAN=\"" + ncoms + 
				"\"><B><NOBR>" + pc.plugin_name + "</NOBR></B></TD>");
		}
		
		last_plugin = pc.plugin_name;

		sbuf.append("<TD VALIGN=TOP><NOBR>" + pc.name + "</NOBR></TD>");
		
		if(pc.args != null)
		{
		    String names = "";
		    String types = "";
		    String defaults = "";
		    String comments = "";

		    for(int a=0; a < pc.args.length; a+=5)
		    {
			if(a > 0)
			{
			    names += "<BR>";
			    types += "<BR>";
			    defaults += "<BR>";
			    comments += "<BR>";
			}
			
			names    += "<NOBR>" +  pc.args[a]    + "</NOBR>";
			types    += "<NOBR>" +  pc.args[a+1]  + "</NOBR>";
			defaults += "<NOBR>" +  pc.args[a+2]  + "</NOBR>";
			comments += "<NOBR>" +  pc.args[a+4]  + "</NOBR>";
		    }
		    
		    sbuf.append("<TD VALIGN=TOP><FONT SIZE=-1>" + names + "</FONT></TD>" +
				"<TD><FONT SIZE=-1>" + types + "</FONT></TD>" + 
				"<TD><FONT SIZE=-1>" + comments + "</FONT></TD>" + 
				"<TD><FONT SIZE=-1>" + defaults + "</FONT></TD>" 
				);
		}
		else
		{
		    sbuf.append("<TD VALIGN=TOP COLSPAN=4>&nbsp;</TD>");
		}

		sbuf.append("</TR>\n");

		bw.write(sbuf.toString());
	    }

	    bw.write("</TABLE>\n");

	    bw.write("</BODY></HTML>");

	    bw.flush();
	}
	catch(FileNotFoundException fnfe)
	{ 
	    mview.informationMessage("Cannot write 'PluginCommands' help page\n  " + fnfe);
	}
	catch(java.io.IOException ioe)
	{ 
	    mview.informationMessage("Cannot write 'PluginCommands' help page\n  " + ioe);
	}
    }

    // ===================================================================================

    public void writeCommandListHelpPageFile()
    {
	Vector coms = mview.getAllCommands();
	Vector sortvec = new Vector();
	java.util.Hashtable ht = new java.util.Hashtable();
	java.util.Hashtable counts = new java.util.Hashtable();
	Vector pnames = new Vector();

	for(int c=0; c < coms.size(); c++)
	{
	    PluginCommand pc  = (PluginCommand) coms.elementAt(c);

	    String name = pc.plugin_name + "." + pc.name;
	    
	    ht.put( name, pc );

	    if(!pnames.contains( pc.plugin_name ))
	    {
		pnames.addElement( pc.plugin_name );
	    }

	    Integer cnt = (Integer)counts.get(pc.plugin_name);
	    if(cnt == null)
		cnt = new Integer(0);
	    counts.put( pc.plugin_name, new Integer( cnt.intValue() + 1) );
	    
	    sortvec.addElement(name);
	}

	String[] pnames_a= (String[]) pnames.toArray(new String[0]);
	java.util.Arrays.sort( pnames_a );

	String[] sort_a = (String[]) sortvec.toArray(new String[0]);
	java.util.Arrays.sort( sort_a );

	try
	{
	    BufferedWriter bw = new BufferedWriter(new FileWriter(new File( users_help_path + "PluginCommandsList.html")));
	    
	    bw.write("<HTML><HEAD><TITLE>maxdView: Plugin Command List</TITLE></HEAD><BODY>");
	    
	    bw.write("<H1>Plugin Commands</H1>\n");

	    bw.write("\n");
	    bw.write("<!-- AUTOMATICALLY GENERATED - DO NOT EDIT THIS FILE !! ---!>\n");
	    bw.write("\n");

	    bw.write("<P>This is an alphabetically sorted list of the commands supported by the currently installed plugins.</P>");
	    
	    bw.write("<P>(also available in <A HREF=\"PluginCommandsTable.html\">tabular format</A>.)</P>");

	    StringBuffer sbuf = new StringBuffer();
	    sbuf.append("<P><UL>");
	    for(int p=0; p <  pnames_a.length; p++)
	    {
		sbuf.append("<LI><A HREF=\"#" + pnames_a[p] +" \">" + pnames_a[p] + "</A>\n");
		
	    }
	    sbuf.append("</UL>\n</P><P>&nbsp;</P>");
	    bw.write(sbuf.toString());

	    for(int p=0; p <  pnames_a.length; p++)
	    {
		sbuf = new StringBuffer();

		java.util.HashSet hm = new java.util.HashSet();
		    
		//System.out.println("commands for " + pnames_a[p]);

		sbuf.append("\n<P>&nbsp;</P><A NAME=\"" + 
			    pnames_a[p] + "\"><H2><NOBR>" + 
			    pnames_a[p] + "</NOBR></H2></A><P><UL>\n");

		Vector args = new Vector();

		for(int c=0; c < sort_a.length; c++)
		{
		    PluginCommand pc = (PluginCommand) ht.get( sort_a[c] );
		    
		    if( pc.plugin_name.equals( pnames_a[p] ))
		    {
			//System.out.println("   " + pc.name);

			sbuf.append("<P><LI><B><TT>");
			sbuf.append(pc.name);
			sbuf.append("</TT></B>");

			// sbuf.append("<TR><TD VALIGN=TOP><I>Comment </I></TD><TD>");
			// sbuf.append(pc.comment == null ? "&nbsp;" : pc.comment);
			// sbuf.append("</TD></TR>\n");
			
			if(pc.args != null)
			{
			    sbuf.append("<TABLE><TR><TD VALIGN=TOP><I>Arguments </I></TD><TD>");
			
			    for(int a=0; a < pc.args.length; a+=5)
			    {
				if(a>0)
				    sbuf.append("<BR>");
				sbuf.append("\n<P><B><TT>");
				sbuf.append(pc.args[a]);
				sbuf.append("\n</TT></B><TABLE><TR><TD VALIGN=TOP><I>Comment </I></TD><TD>");
				sbuf.append(pc.args[a+4]);
				sbuf.append("</TD></TR>\n<TR><TD VALIGN=TOP><I>Type </I></TD><TD>");
				sbuf.append(pc.args[a+1]);
				sbuf.append("</TD></TR><TR><TD VALIGN=TOP><I>Default </I></TD><TD>");
				sbuf.append(pc.args[a+2]);
				sbuf.append("</TD></TR></TABLE></P>\n");

			    }
			    sbuf.append("</TABLE></TD></TR>");
			}

			sbuf.append("<BR>");
		    }
		}

		sbuf.append("</UL></P>\n");

		bw.write(sbuf.toString());

	    }

	    bw.write("<P>&nbsp;</P></BODY></HTML>");

	    bw.flush();
	}
	catch(FileNotFoundException fnfe)
	{ 
	    mview.informationMessage("Cannot write 'PluginCommands' help page\n  " + fnfe);
	}
	catch(java.io.IOException ioe)
	{ 
	    mview.informationMessage("Cannot write 'PluginCommands' help page\n  " + ioe);
	}
    }


    // ===================================================================================

    public void writeContentsHelpPageFile()
    {

	try
	{
	    BufferedWriter bw = new BufferedWriter(new FileWriter(new File( users_help_path + "Contents.html")));
	    
	    bw.write("<HTML>\n");
	    bw.write("<HEAD>\n");
	    bw.write("<TITLE>maxdView Help</TITLE>\n");
	    bw.write("<META name=\"description\" content=\"maxdView 1.0.4 Help Main page\">\n");
	    bw.write("<META name=\"keywords\" content=\"maxd, maxdView, microarray, expression, data,\n");
	    bw.write("analysis, visualsation, visualization ,viewing\">\n");
	    bw.write("</HEAD>\n");
	    
	    bw.write("<BODY BGCOLOR=\"#FFFFFF\">\n");
	    bw.write("<CENTER>\n");
	    bw.write("<TABLE ALIGN=CENTER WIDTH=100% BORDER=0 CELLPADDING=0 CELLSPACING=0>\n");
	    
	    bw.write("<TR><TD ALIGN=CENTER COLSPAN=3><FONT SIZE=\"-1\">" + 
		     mview.getAppTitle() + " - &copy The University of Manchester - " + 
		     "Microarray Bioinformatics Group</FONT></TD></TR>\n");
	    
	    bw.write("<TR><TD COLSPAN=3 >&nbsp;</TR>\n");
	    
	    bw.write("<TR><TD ALIGN=CENTER COLSPAN=3><IMG BORDER=0 SRC=\"" + shared_help_url + "../images/maxdView.jpg\"></TD></TR>\n");
	    
	    bw.write("<TR><TD COLSPAN=3 >&nbsp;</TR>\n");
	    
	    bw.write("<TR>\n");
	    bw.write("<TD ALIGN=RIGHT><FONT FACE=\"helvetica\" SIZE=\"+1\"><A HREF=\"" + shared_help_url + "Overview.html\">Overview</A></FONT></TD>\n");
	    bw.write("<TD WIDTH=24>&nbsp;</TD>\n");
	    bw.write("<TD ALIGN=LEFT><FONT FACE=\"helvetica\" SIZE=\"+1\"><A HREF=\"About.html\">About</A></FONT></TD>\n");
	    bw.write("</TR>\n");
	    
	    bw.write("<TR>\n");
	    bw.write("<TD ALIGN=RIGHT><FONT FACE=\"helvetica\" SIZE=\"+1\"><A HREF=\"" + shared_help_url + "Concepts.html\">Concepts</A></FONT></TD>\n");
	    bw.write("<TD WIDTH=24>&nbsp;</TD>\n");
	    bw.write("<TD ALIGN=LEFT><FONT FACE=\"helvetica\" SIZE=\"+1\"><A HREF=\"" + shared_help_url + "WhatsNew.html\">What's New?</A></FONT></TD>\n");
	    bw.write("</TR>\n");
	    
	    bw.write("<TR>\n");
	    bw.write("<TD ALIGN=RIGHT><FONT FACE=\"helvetica\" SIZE=\"+1\"><A HREF=\"" + shared_help_url + "Tutorial.html\">Tutorials</A></FONT></TD>\n");
	    bw.write("<TD WIDTH=24>&nbsp;</TD>\n");
	    bw.write("<TD ALIGN=LEFT><FONT FACE=\"helvetica\" SIZE=\"+1\"><A HREF=\"" + shared_help_url + "ReportingBugs.html\">Reporting bugs</A></FONT></TD>\n");
	    bw.write("</TR>\n");
	    
	    bw.write("<TR>\n");
	    bw.write("<TD ALIGN=RIGHT><FONT FACE=\"helvetica\" SIZE=\"+1\"><A HREF=\"" + shared_help_url + "Plugins.html\">Plugins</A></FONT></TD>\n");
	    bw.write("<TD WIDTH=24>&nbsp;</TD>\n");
	    bw.write("<TD ALIGN=LEFT><FONT FACE=\"helvetica\" SIZE=\"+1\"><A HREF=\"PluginCommandsList.html\">Plugin commands</A></FONT></TD>\n");
	    bw.write("</TR>\n");
	    
	    bw.write("<TR>\n");
	    bw.write("<TD ALIGN=RIGHT><FONT FACE=\"helvetica\" SIZE=\"+1\"><A HREF=\"" + shared_help_url + "Glossary.html\">Glossary</A></FONT></TD>\n");
	    bw.write("<TD WIDTH=24>&nbsp;</TD>\n");
	    bw.write("<TD ALIGN=LEFT><FONT FACE=\"helvetica\" SIZE=\"+1\"><A HREF=\"" + shared_help_url + "MethodRef.html\">Method reference</A></FONT></TD>\n");
	    bw.write("</TR>\n");
	    
	    bw.write("<TR>\n");
	    bw.write("<TD ALIGN=RIGHT><FONT FACE=\"helvetica\" SIZE=\"+1\"><A HREF=\"Commands.html\">Menu commands</A></FONT></TD>\n");
	    bw.write("<TD WIDTH=24>&nbsp;</TD>\n");
	    bw.write("<TD ALIGN=LEFT><FONT FACE=\"helvetica\" SIZE=\"+1\"><A HREF=\"" + shared_help_url + "ProgGuide.html\">Programmer's Guide</A></FONT></TD>\n");
	    bw.write("</TR>\n");
	    
	    bw.write("<TR>\n");
	    bw.write("<TD ALIGN=RIGHT><FONT FACE=\"helvetica\" SIZE=\"+1\"><A HREF=\"" + shared_help_url + "DataModel.html\">Data Model</A></FONT></TD>\n");
	    bw.write("<TD WIDTH=24>&nbsp;</TD>\n");
	    bw.write("<TD ALIGN=LEFT><FONT FACE=\"helvetica\" SIZE=\"+1\"><A HREF=\"" + shared_help_url + "FileFormats.html\">File formats</A></FONT></TD>\n");
	    bw.write("</TR>\n");
	    
	    bw.write("<TR><TD>&nbsp;</TR>\n");
	    
	    bw.write("<TR><TD ALIGN=CENTER COLSPAN=3><FONT FACE=\"helvetica\" SIZE=\"+1\">" + 
		     "<A HREF=\"http://www.bioinf.man.ac.uk/microarray/maxd/\"> " + 
		     "http://www.bioinf.man.ac.uk/microarray/maxd/</A></FONT></TD></TR>\n");
	    
	    bw.write("</TABLE>\n");
	    bw.write("</CENTER>\n");
	    bw.write("</BODY>\n");
	    bw.write("</HTML>\n");

	    bw.flush();

	}
	catch(FileNotFoundException fnfe)
	{ 
	    mview.informationMessage("Cannot write 'Contents' help page\n  " + fnfe);
	}
	catch(java.io.IOException ioe)
	{ 
	    mview.informationMessage("Cannot write 'Contents' help page\n  " + ioe);
	}
 
    }

}
